"""
Django settings for blogproject project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '2sxpn3ii^jo7v5yp(+*^ktordp-#^n4if3rc_^qk0*xh#7tbv7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

#model重写了user，要重载才可以
AUTH_USER_MODEL =  'users.User'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
    'comments',
    'users',
    #md格式发布框
    'mdeditor',
    #搜索插件
    'haystack',
    'xadmin',
    'crispy_forms',

]
#邮箱登录
AUTHENTICATION_BACKENDS = (
    #系统的，用户用户名和密码正确会通过验证
    'django.contrib.auth.backends.ModelBackend',
    #自定义的 用户提供正确的EMAIL和密码会通过验证
    'users.backends.EmailBackend',
)

#邮件发送
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True   #是否使用TLS安全传输协议(用于在两个通信应用程序之间提供保密性和数据完整性。)
EMAIL_HOST = 'smtp.163.com'   #发送邮件的邮箱 的 SMTP服务器，这里用了163邮箱
EMAIL_PORT = 25     #发件箱的SMTP服务器端口
EMAIL_HOST_USER = '***@163.com'    #发送邮件的邮箱地址
EMAIL_HOST_PASSWORD = '***'         #发送邮件的邮箱密码(这里使用的是授权码)
DEFAULT_FROM_EMAIL = '***@163.com' #'这一项一定需要添加'
EMAIL_FROM = '***@163.com'   #'可加可不加'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blogproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blogproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    'ENGINE': 'django.db.backends.mysql',
    'NAME':'blog',   #注意这里的数据库应该以utf-8编码
    'USER': 'root',
    'PASSWORD': '***',
    'HOST': '***',
    'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# 指定登录页面对应的url地址
LOGIN_URL = '/users/login/'

LOGIN_REDIRECT_URL = '/blog/list/'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static')
]
# STATIC_ROOT = "all_static_files"

#上传文件路径配置
# MEDIA_ROOT =  '/uploads'
# MEDIA_URL = '/media/'
#url映射
MEDIA_URL = '/media/'
#设置静态文件路径为主目录下
MEDIA_ROOT = os.path.join(BASE_DIR,'media')

#搜索文章插件配置
HAYSTACK_CONNECTIONS = {
    'default': {
        #指定了 django haystack 使用的搜索引擎，需要创建
        'ENGINE': 'blog.whoosh_cn_backend.WhooshEngine',
        #指定索引文件需要存放的位置
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    },
}
# 指定如何对搜索结果分页
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 10
#指定什么时候更新索引，此处作用是每当有文章更新时就更新索引。
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
